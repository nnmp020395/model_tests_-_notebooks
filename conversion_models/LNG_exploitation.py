
# coding: utf-8

# # LNG Lidar 

# In[1]:


import xarray as xr
from pathlib import Path
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.colors import LogNorm
import matplotlib.colors as colors
from tqdm import tqdm
get_ipython().magic('matplotlib notebook')


# In[2]:


import warnings
warnings.filterwarnings('ignore')


# In[3]:


LNG_DIR = Path('/homedata/nmpnguyen/LNG/NETCDF/')
LNG_LISTFILES = sorted(LNG_DIR.glob('LNG_HSRL_RAW_L1_TEMP_CADDIWA_*.nc'))
LNG_LISTFILES


# In[4]:


filepath = LNG_LISTFILES[5]
data = xr.open_dataset(filepath)
data


# In[12]:


transmittance355 = data['Model_Molecular_Transmittance_532'].where((data['Validity_rate']==1) & (data['LNG_UpDown']==1), drop=True)
# MPAB355 = data['LNG_Molecular_Parallel_Attenuated_Backscatter_532'].where((data['Validity_rate']==1) & (data['LNG_UpDown']==1), drop=True)
MMB355 = data['Model_Molecular_Backscatter_532'].where((data['Validity_rate']==1) & (data['LNG_UpDown']==1), drop=True)
ATB355 = data['LNG_Total_Attenuated_Backscatter_532'].where((data['Validity_rate']==1) & (data['LNG_UpDown']==1), drop=True)


# In[15]:


MMB355*transmittance355, ATB355


# In[183]:


keys = ['raw_HSR_Signal_532', 'Model_Molecular_Backscatter_532', 'Model_Molecular_Extinction_532','Model_Molecular_Transmittance_532', 
        'LNG_Total_Attenuated_Backscatter_532']
import random
fig, axes = plt.subplots(ncols=3, nrows=2, sharey=True, figsize=(10,7))
for i,ax in enumerate(axes.flat):
    valid_rate = (data['Validity_rate'] == 1) 
    height, time, Pointing = data['Height'].isel(time=valid_rate).values , data['Time'].isel(time=valid_rate).values, data['LNG_UpDown'].isel(time=valid_rate).values
    height2, time2 = height[np.unique(np.where(Pointing==1)[0]),:], time[np.unique(np.where(Pointing==1)[0])], 
    if i == 5 : 
        dt = data[keys[1]].isel(time=valid_rate).values * data[keys[3]].isel(time=valid_rate).values
        xlabel = 'Attenuated_Backscatter_532'
    elif i<5:     
        dt = data[keys[i]].isel(time=valid_rate).values
        xlabel=keys[i]
    
    dt2 = dt[np.unique(np.where(Pointing==1)[0]),:]
    print(height2.shape, dt2.shape)
    idx = random.randint(0, time2.shape[0])
    ax.semilogx(dt2[idx,:], height2[idx,:], color='g')
    ax.set_ylim(-1, 18)
    ax.set(xlabel=xlabel, ylabel='Alt [km]')

axes[1,2].plot(dt2[idx,:], height2[idx,:], 'r', label='Attn_Molecular_Bcs', zorder=10)
dt = data[keys[-1]].isel(time=valid_rate).values
dt2 = dt[np.unique(np.where(Pointing==1)[0]),:]
axes[1,2].plot(dt2[idx,:], height2[idx,:], 'g', label='Attn_Backscatter_532')
axes[1,2].legend()
plt.suptitle(f'{filepath.stem}, {time2[idx]}')
plt.savefig(Path('/homedata/nmpnguyen/LNG/Figs/', f'{filepath.stem}_{time2[idx]}.png'))


# In[12]:


def find_nearest_index(array, value):
    array = np.asarray(array)
    idx = (np.abs(array - value)).argmin()
    return idx

# find_nearest_index(data['Time'].values, 70000)
key532 = ['raw_HSR_Signal_532', 
          'Model_Molecular_Backscatter_532', 
          'Model_Molecular_Extinction_532',
          'Model_Molecular_Transmittance_532', 
          'LNG_Total_Attenuated_Backscatter_532']

key355 = ['raw_HSR_Signal_355', 
        'Model_Molecular_Backscatter_355', 
        'Model_Molecular_Extinction_355',
        'Model_Molecular_Transmittance_355', 
        'LNG_Molecular_Parallel_Attenuated_Backscatter_355',
        'LNG_Parallel_Attenuated_Backscatter_355',
        'LNG_Perpendicular_Attenuated_Backscatter_355']

time_to_see = [0, 78000, 36000, 54700, 31200, 72000, 68000, 60000, 37000]


# In[13]:



for filepath, i in zip(LNG_LISTFILES[3:4], range(3,4)):
    fig, ((ax, ax2), (ax3, ax4), (ax5, ax6)) = plt.subplots(ncols=2, nrows=3, figsize=(10,12))
    data = xr.open_dataset(filepath)
    valid_rate = (data['Validity_rate'] == 1) 
    height, time, Pointing = data['Height'].isel(time=valid_rate).values , data['Time'].isel(time=valid_rate).values, data['LNG_UpDown'].isel(time=valid_rate).values
    maskHSR532 = data['Mask_532'].isel(time=valid_rate).values
    idx = find_nearest_index(time, time_to_see[i])
    limitez = np.where((height[idx,:] > 2.5) & (height[idx,:] < 3))[0]
    # 532nm
    mol = data[key532[1]].isel(time=valid_rate) * data[key532[3]].isel(time=valid_rate)
    atb = data[key532[-1]].isel(time=valid_rate)
#     pr2_integ = 0; mol_attn_integ = 0
#     for z in limitez[:-1]:
#         pr2_integ = pr2_integ + atb[idx,z]*(height[idx, z+1] - height[idx, z])
#         mol_attn_integ = mol_attn_integ + mol[idx,z]*(height[idx, z+1] - height[idx, z])

#     const = (mol_attn_integ/pr2_integ).reshape(-1,1)
#     print(const)
    sr = atb/mol
    sr532 = sr.where(((Pointing == 1)& np.isin(maskHSR532, [0,1,2,3])), drop=False)
    sr532_clear = sr.where(((Pointing == 1)& (maskHSR532 == 0)), drop=False)
    atb532 = atb.where(((Pointing == 1)& np.isin(maskHSR532, [0,1,2,3])), drop=False)
    mol532 = mol.where(((Pointing ==1)& np.isin(maskHSR532, [0,1,2,3])), drop=False)
    ax3.semilogx(mol532[idx,:], height[idx,:], '--', color='g')
    # 355nm
    mol = data[key355[4]].isel(time=valid_rate)# * data[key355[3]].isel(time=valid_rate)
    atb = data[key355[-2]].isel(time=valid_rate) + data[key355[-1]].isel(time=valid_rate)
#     pr2_integ = 0; mol_attn_integ = 0
#     for z in limitez[:-1]:
#         pr2_integ = pr2_integ + atb[:,z]*(height[:, z+1] - height[:, z])
#         mol_attn_integ = mol_attn_integ + mol[:,z]*(height[:, z+1] - height[:, z])

#     const = (mol_attn_integ/pr2_integ).reshape(-1,1)
#     print(const[idx])
    sr = atb/mol
    sr355 = sr.where(((Pointing == 1)& np.isin(maskHSR532, [0,1,2,3])), drop=False) #np.ma.masked_where(Pointing!=1, sr)
    sr355_clear = sr.where(((Pointing == 1)& (maskHSR532 == 0)), drop=False)
    atb355 = atb.where(((Pointing == 1)& np.isin(maskHSR532, [0,1,2,3])), drop=False)
    mol355 = mol.where(((Pointing ==1)& np.isin(maskHSR532, [0,1,2,3])), drop=False)
    ax3.semilogx(mol355[idx,:], height[idx,:], '--', color='b')
    
    pcm = ax.pcolormesh(time, height.T, sr532.values.T, cmap='turbo', vmin=0, vmax=20)
    ax.set_ylim(-1,18)
    plt.colorbar(pcm, ax=ax, label='SR532')
    ax.set(xlabel='Time, Sec UTC', ylabel='Alt [km]', title=f'{filepath.stem.split("_")[6]}')
    
    pcm = ax2.pcolormesh(time, height.T, sr355.values.T, cmap='turbo', vmin=0, vmax=20)
    ax2.set_ylim(-1,18)
    plt.colorbar(pcm, ax=ax2, label='SR355')
    ax2.set(xlabel='Time, Sec UTC', ylabel='Alt [km]', title=f'{filepath.stem.split("_")[6]}')
    

    ax.axvline(time[idx], color="black", linestyle="--")
    ax2.axvline(time[idx], color="black", linestyle="--")
    ax3.semilogx(atb532[idx,:], height[idx,:], color='g', label='532')
    ax3.semilogx(atb355[idx,:], height[idx,:], color='b', label='355')    
    ax3.axhline(data['Aircraft_Altitude'].isel(time=valid_rate).values[idx],  color='k', linestyle='-')
    ax3.set_ylim(-1, 12)
    ax3.set_xlim(1e-08, 1e-5)
    ax3.set(xlabel='ATB', ylabel='Alt [km]', title=f'{filepath.stem.split("_")[6]}, {time[idx]}')

    ax4.plot((atb532/mol532)[idx,:], height[idx,:], color='g', label='532')
    ax4.plot((atb355/mol355)[idx,:], height[idx,:], color='b', label='355')    
    ax4.axvline(1, color="black", linestyle="--") 
    ax4.set_ylim(-1, 10)
    ax4.set_xlim(0,8)
    ax4.set(xlabel='SR', ylabel='Alt [km]', title=f'{filepath.stem.split("_")[6]}, {time[idx]}')
    
#     Xx, Yy, Hcounts, _ = get_params_histogram([[0,50], [0,100]], sr355.values.flatten(), sr532.values.flatten())
#     hist = ax5.pcolormesh(Xx, Yy, Hcounts.T, norm=LogNorm(vmin=1e-4, vmax=1e-1))
#     c = plt.colorbar(hist, ax=ax5, label='%')
#     plt.minorticks_on()
#     ax5.set(xlabel='SR355', ylabel='SR532', title='clear sky + particules')
#     ax5.grid(b=True, which='major', color='k', linestyle='--', alpha=0.2)
    
#     Xx, Yy, Hcounts, _ = get_params_histogram([[0,50], [0,100]], sr355_clear.values.flatten(), sr532_clear.values.flatten())
#     hist = ax6.pcolormesh(Xx, Yy, Hcounts.T, norm=LogNorm(vmin=1e-4, vmax=1e-1))
#     c = plt.colorbar(hist, ax=ax6, label='%')
#     plt.minorticks_on()
#     ax6.set(xlabel='SR355', ylabel='SR532', title='clear sky')
#     ax6.grid(b=True, which='major', color='k', linestyle='--', alpha=0.2)
    
#     plt.tight_layout()
#     plt.savefig(Path('/homedata/nmpnguyen/LNG/Figs/', f'Illus_ClearSky_Particules_Nadir_{filepath.stem}.png'))


# In[160]:


atb532.dropna(how='all', dim='time').shape[0]


# In[113]:


valid_rate = (data['Validity_rate'] == 1) 
height, time, Pointing = data['Height'].isel(time=valid_rate).values , data['Time'].isel(time=valid_rate).values, data['LNG_UpDown'].isel(time=valid_rate).values
# idx = find_nearest_index(time, time_to_see[5])
limitez = np.where((height[idx,:] > 2.5) & (height[idx,:] < 3))[0]

#---------------------------------
pr2_norm = data[key355[-2]].isel(time=valid_rate).values
mol_attn = data[key355[1]].isel(time=valid_rate).values * data[key355[3]].isel(time=valid_rate).values

pr2_integ = 0; mol_attn_integ = 0
for z in range(len(limitez)-1):
    pr2_integ = pr2_integ + pr2_norm[idx,z]*(height[idx,limitez[z]]- height[idx,limitez[z+1]])
    mol_attn_integ = mol_attn_integ + mol_attn[idx,z]*(height[idx,limitez[z]]- height[idx,limitez[z+1]])

const = mol_attn_integ/pr2_integ
print(mol_attn_integ, pr2_integ)

#---------------------------------
pr2_norm2 = data[key532[-1]].isel(time=valid_rate).values
mol_attn2 = data[key532[1]].isel(time=valid_rate).values * data[key532[3]].isel(time=valid_rate).values

pr2_integ2 = 0; mol_attn_integ2 = 0
for z in limitez[:-1]:
    pr2_integ2 = pr2_integ2 + pr2_norm2[idx,z]*(height[idx, z+1] - height[idx, z])
    mol_attn_integ2 = mol_attn_integ2 + mol_attn2[idx,z]*(height[idx, z+1] - height[idx, z])

const2 = mol_attn_integ2/pr2_integ2
print(const2)


# In[112]:


data[][idx,limitez]


# In[77]:


print(time[idx])
fig, ax = plt.subplots()
ax.semilogx(mol_attn[idx,:]/const, height[idx,:], '--', color='b')
ax.semilogx(mol_attn2[idx,:]/const2, height[idx,:], '--', color='g')
ax.plot(pr2_norm[idx,:], height[idx,:], color='b')
ax.plot(pr2_norm2[idx,:], height[idx,:], color='g')
# ax.plot(pr2_norm[idx,:]/(mol_attn[idx,:]), height[idx,:], color='r')
# ax.axvline(1, color="black", linestyle="--") 
ax.set_ylim(0, 10)
# ax.set_xlim(0, 8)
ax.set_xlim(1e-6, 2e-4)


# In[5]:


key532 = ['raw_HSR_Signal_532', 'Model_Molecular_Backscatter_532', 'Model_Molecular_Extinction_532','Model_Molecular_Transmittance_532', 
        'LNG_Total_Attenuated_Backscatter_532']

key355 = ['raw_HSR_Signal_355', 
        'Model_Molecular_Backscatter_355', 
        'Model_Molecular_Extinction_355',
        'Model_Molecular_Transmittance_355', 
        'LNG_Parallel_Attenuated_Backscatter_355',
        'LNG_Perpendicular_Attenuated_Backscatter_355']

time_to_see = [0, 77400, 36000, 58050, 31800, 72000, 68000, 60000, 37000]
import random

allsr355 = None
allsr532 = None
allatb355 = None
allatb532 = None
fig, axs = plt.subplots(figsize=(16,10), nrows=3, ncols=3)
for filepath, (i,ax) in zip(LNG_LISTFILES[1:], enumerate(axs.flat)):
    data = xr.open_dataset(filepath)
    valid_rate = (data['Validity_rate'] == 1) 
    height, time, Pointing = data['Height'].isel(time=valid_rate).values , data['Time'].isel(time=valid_rate).values, data['LNG_UpDown'].isel(time=valid_rate).values
#     height2, time2 = height[np.unique(np.where(Pointing==1)[0]),:], time[np.unique(np.where(Pointing==1)[0])], 
    maskHSR532 = data['Mask_532'].isel(time=valid_rate).values
    # SR 532
    mol = data[key532[1]].isel(time=valid_rate).values * data[key532[3]].isel(time=valid_rate).values
    atb = data[key532[-1]].isel(time=valid_rate).values
    sr = atb/mol
    sr_after = np.ma.masked_where((Pointing==3)|(Pointing==2), sr)
    sr532 = np.ma.masked_where(np.isin(maskHSR532, [0,1,2,3], invert=True), sr_after)
    atb532 = np.ma.masked_where(np.isin(maskHSR532, [0,1,2,3], invert=True), atb)
#     sr532 = sr[np.unique(np.where((Pointing==1)&(maskHSR532==1))[0]),:] #np.ma.masked_where(Pointing!=1, sr)
    print(sr532.shape)
#     time2 = time[np.unique(np.where(sr532.mask==False)[0])]
#     idx = random.choice(np.unique(np.where(sr532.mask==False)[0]))#random.randint(0, time2.shape[0])
#     idx = find_nearest_index(time, time_to_see[i])
#     ax.plot(sr532[idx,:], height[idx,:], color='g', label='532')
    
#     pcm = ax.pcolormesh(time, height.T, sr532.T, cmap='turbo', vmin=0, vmax=10)
#     ax.set_ylim(-1,18)
#     plt.colorbar(pcm, ax=ax)

    # SR 355
    mol = data[key355[1]].isel(time=valid_rate).values * data[key355[3]].isel(time=valid_rate).values
    atb = data[key355[-2]].isel(time=valid_rate).values + data[key355[-1]].isel(time=valid_rate).values
    sr = atb/mol
    sr_after = np.ma.masked_where((Pointing==3)|(Pointing==2), sr)
    sr355 = np.ma.masked_where(np.isin(maskHSR532, [0,1,2,3], invert=True), sr_after) #np.ma.masked_where(Pointing!=1, sr)
    atb355 = np.ma.masked_where(np.isin(maskHSR532, [0,1,2,3], invert=True), atb)
    print(sr355.shape)
#     ax.plot(sr355[idx,:], height[idx,:], color='b', label='355')    
#     ax.axvline(1, color="black", linestyle="--") 
#     ax.set_ylim(-1, 18)
#     ax.set_xlim(0, 5)
#     ax.set(xlabel='SR', ylabel='Alt [km]', title=f'{filepath.stem.split("_")[6]}, {time[idx]}')
#     pcm = ax.pcolormesh(time, height.T, (sr532/sr355).T, vmin=0, vmax=10, cmap='turbo')
#     plt.colorbar(pcm, ax=ax, label='SR 532')
#     ax.set_ylim(-1,18)
#     ax.set(xlabel='SR', ylabel='Alt [km]', title=f'{filepath.stem.split("_")[6]}')
    if (allatb532 is None )| (allatb355 is None):
        allatb355 = atb355.flatten()
        allatb532 = atb532.flatten()
    else:
        allatb355 = np.concatenate((allatb355, atb355.flatten()))
        allatb532 = np.concatenate((allatb532, atb532.flatten()))


# In[ ]:


get_ipython().magic('matplotlib inline')
Xx, Yy, Hcounts, _ = get_params_histogram([[-8,-3],[-8,-3]], np.log10(allatb355), np.log10(allatb532))
fig, ax = plt.subplots()
hist = ax.pcolormesh(Xx, Yy, Hcounts.T, norm=LogNorm(vmin=1e-4, vmax=1e-1))
c = plt.colorbar(hist, ax=ax, label='%')
# plt.xscale('log')
# plt.yscale('log')
# ax.set_xlim(1e-8, 1e-3)
# ax.set_ylim(1e-8, 1e-3)

plt.minorticks_on()
ax.set(xlabel='ATB 355', ylabel='ATB 532', title='ATB532/ATB355 ')
ax.grid(b=True, which='major', color='k', linestyle='--', alpha=0.2)

plt.savefig('/homedata/nmpnguyen/LNG/Figs/histo_ATB532_ATB355.png')


# In[73]:


# a = np.ma.masked_where(np.isin(maskHSR532, [0,1,2], invert=True), sr)
a1 = np.ma.masked_where((Pointing==3)|(Pointing==2), maskHSR532)
a1after = np.ma.masked_where((Pointing==3)|(Pointing==2), sr)
a1after = np.ma.masked_where(np.isin(maskHSR532, [0,1,2,3], invert=True), a1after)
a2 = np.ma.masked_where((Pointing==3)|(Pointing==1), maskHSR532)
a3 = np.ma.masked_where((Pointing==1)|(Pointing==2), maskHSR532)
print(a1after.shape)
print(time.shape)

fig, (ax, ax2, ax3) = plt.subplots(nrows=3, figsize=(8,7))
ax.pcolormesh(time, height.T, a1.T, cmap='turbo', vmin=-3, vmax=3)
ax.set_ylim(-1,18)

ax2.pcolormesh(time, height.T, a1after.T, cmap='turbo', vmin=0, vmax=10)
ax2.set_ylim(-1,18)

# ax3.pcolormesh(time, height.T, a3.T, cmap='turbo', vmin=-3, vmax=3)
# ax3.set_ylim(-1,18)


# In[7]:



def get_params_histogram(srlimite, Xdata, Ydata):
    def remove_NaN_Inf_values(arrayX, arrayY):
        idsX = np.where(~np.isnan(arrayX)&~np.isinf(arrayX))[0]
        idsY = np.where(~np.isnan(arrayY)&~np.isinf(arrayY))[0]
        print(idsX, idsY)
        mask = np.intersect1d(idsX, idsY)
        return mask
    
    from scipy import stats
    from scipy.optimize import curve_fit
    # objective function for best fit
    def objective(x, a, b):
        return a * x + b
    
#     if (~np.isnan(Xdata)|~np.isinf(Xdata)).sum() > (~np.isnan(Ydata)|~np.isinf(Ydata)).sum():
    mask = remove_NaN_Inf_values(Xdata, Ydata)
    print('A')
    H = np.histogram2d(Xdata[mask], Ydata[mask], bins=100, range = srlimite)
    Hprobas = H[0]*100/len(Ydata[mask])
    noNaNpoints = len(Ydata[mask])
    # create the curve fit
    param, param_cov = curve_fit(objective, Xdata[mask], Ydata[mask])     
    print(param, param_cov)

    print(f'nombre de points no-NaN: {noNaNpoints}')
    xedges, yedges = np.meshgrid(H[1], H[2])
#     print(slope, intercept)
#     fitLine = slope * allsr532 + intercept
    return xedges, yedges, Hprobas, noNaNpoints


# In[26]:


# Xx, Yy, Hcounts, _ = get_params_histogram([[0,50], [0,100]], allsr355, allsr532)
Xx, Yy, Hcounts, _ = get_params_histogram([[0,50], [0,100]], sr355, sr532)


# In[9]:


# Histogram SR532/SR355

fig, ax = plt.subplots()
hist = ax.pcolormesh(Xx, Yy, Hcounts.T, norm=LogNorm(vmin=1e-5, vmax=1e-1))
c = plt.colorbar(hist, ax=ax, label='%')
plt.minorticks_on()
ax.set(xlabel='SR355', ylabel='SR532')
ax.grid(b=True, which='major', color='k', linestyle='--', alpha=0.2)
plt.savefig('/homedata/nmpnguyen/LNG/scatterSR_withoutmask.png')


# In[200]:


# SR 355
keys = ['raw_HSR_Signal_355', 
        'Model_Molecular_Backscatter_355', 
        'Model_Molecular_Extinction_355',
        'Model_Molecular_Transmittance_355', 
        'LNG_Parallel_Attenuated_Backscatter_355',
        'LNG_Perpendicular_Attenuated_Backscatter_355']

fig, axs = plt.subplots(figsize=(15,15), nrows=3, ncols=3)
for filepath, (i, ax) in zip(LNG_LISTFILES, enumerate(axs.flat)):
    data = xr.open_dataset(filepath)
    valid_rate = (data['Validity_rate'] == 1) 
    height, time, Pointing = data['Height'].isel(time=valid_rate).values , data['Time'].isel(time=valid_rate).values, data['LNG_UpDown'].isel(time=valid_rate).values
    mol = data[keys[1]].isel(time=valid_rate).values * data[keys[3]].isel(time=valid_rate).values
    atb = data[keys[-2]].isel(time=valid_rate).values + data[keys[-1]].isel(time=valid_rate).values
    sr = atb/mol
    height2, time2 = height[np.unique(np.where(Pointing==1)[0]),:], time[np.unique(np.where(Pointing==1)[0])]
    sr2 = sr[np.unique(np.where(Pointing==1)[0]),:]
    print(sr2.shape, height2.shape)
#     sr2 = np.ma.masked_where(Pointing!=1, sr)
    idx = random.randint(0, time2.shape[0])
    ax.semilogx(sr2[idx,:], height2[idx,:], color='b')
    ax.axvline(1, color="black", linestyle="--")
    ax.set_ylim(-1, 18)
    ax.set(xlabel='SR', ylabel='Alt [km]', title=f'{filepath.stem.split("_")[6]}, {time2[idx]}')


# In[198]:


fig, ax = plt.subplots()
idx = random.randint(0, time2.shape[0])
ax.semilogx(sr2[idx,:], height2[idx,:], color='b')
ax.axvline(1, color="black", linestyle="--")
ax.set_ylim(-1, 18)
ax.set(xlabel='SR', ylabel='Alt [km]', title=f'{filepath.stem.split("_")[6]}, {time2[idx]}')


# In[19]:


for filepath in (LNG_LISTFILES):
    print(filepath)
    data = xr.open_dataset(filepath)
    #ATB 532
#     LNG_Total_Attenuated_Backscatter = data['LNG_Total_Attenuated_Backscatter_532'].where((data['Validity_rate']==1), drop=True)#&(data['LNG_UpDown']==1)#.plot(x='time', y='height', norm=LogNorm(vmin=1e-8, vmax=1e-3), cmap='turbo')
#     Pointing = data['LNG_UpDown'].where((data['Validity_rate']==1), drop=True)
#     print(valid_Time.shape, valid_Height.shape)
#     m1 = np.ma.masked_where(Pointing.values!=1,LNG_Total_Attenuated_Backscatter.values)
#     fig, ax = plt.subplots(figsize=(8,4))
#     pcm = ax.pcolormesh(valid_Time.values, valid_Height.values.T, m1.T, shading='gouraud',
#                    cmap='turbo', norm=LogNorm(vmin=1e-8, vmax=1e-3))
#     plt.colorbar(pcm, ax=ax, label='LNG_Total_Attenuated_Backscatter_532, [m-1.sr-1]')
#     ax.set_ylim(-1,18)
#     ax.set(xlabel='time, SEC UTC', ylabel='Alt, km', title = f'{filepath.stem}')
#     plt.savefig(Path('/homedata/nmpnguyen/LNG/', f'532Nadir_{filepath.stem}.png'))
#     plt.close()
    #SR 355
    valid_rate = (data['Validity_rate']==1)
    valid_Time = data['Time'].isel(time=valid_rate)#&(data['LNG_UpDown'].isel(height=10)==1)
    valid_Height = data['Height'].isel(time=valid_rate)#&(data['LNG_UpDown']==1)
    Pointing = data['LNG_UpDown'].isel(time=valid_rate)
    SR355 = data['LNG_Parallel_Attenuated_Backscatter_355']/data['LNG_Molecular_Parallel_Attenuated_Backscatter_355']
    SR355 = SR355.isel(time=valid_rate).values
    m3 = np.ma.masked_where(Pointing.values!=1, SR355)
    fig, ax = plt.subplots(figsize=(8,4))
    pcm = ax.pcolormesh(valid_Time.values, valid_Height.values.T, m3.T, cmap='turbo', vmin=0, vmax=10)
    plt.colorbar(pcm, ax=ax, label='LNG_Scattering_Ratio_355')
    ax.set_ylim(-1,18)
    ax.set(xlabel='time, SEC UTC', ylabel='Alt, km', title = f'{filepath.stem}')
    plt.savefig(Path('/homedata/nmpnguyen/LNG/', f'355Nadir_SR_{filepath.stem}.png'))
    plt.close()


# In[30]:


fig, ax = plt.subplots()
ax.plot(m3[800,:], valid_Height[800,:])
ax.set_xlim(-1,10)
ax.set_ylim(-1,18)
ax.set(title=f'{filepath.stem}\n{valid_Time[800].values}')


# In[116]:


valid_Time = data['Time'].where((data['Validity_rate']==1), drop=True)#&(data['LNG_UpDown'].isel(height=10)==1)
valid_Height = data['Height'].where((data['Validity_rate']==1), drop=True)#&(data['LNG_UpDown']==1)
LNG_Total_Attenuated_Backscatter = data['LNG_Total_Attenuated_Backscatter_532'].where((data['Validity_rate']==1), drop=True)#&(data['LNG_UpDown']==1)#.plot(x='time', y='height', norm=LogNorm(vmin=1e-8, vmax=1e-3), cmap='turbo')
Pointing = data['LNG_UpDown'].where((data['Validity_rate']==1), drop=True)
print(Pointing.shape, data['Time'])


# In[15]:


#SR 532
SR532 = data['LNG_Total_Attenuated_Backscatter_532']/data['Model_Molecular_Backscatter_532']
valid_rate = (data['Validity_rate']==1)
SR532 = SR532.isel(time=valid_rate).values
Pointing = data['LNG_UpDown'].where((data['Validity_rate']==1), drop=True)
m2 = np.ma.masked_where(Pointing.values!=1, SR532)

#SR 355
SR355 = data['LNG_Parallel_Attenuated_Backscatter_355']/data['LNG_Molecular_Parallel_Attenuated_Backscatter_355']
SR355 = SR355.isel(time=valid_rate).values
m3 = np.ma.masked_where(Pointing.values!=1, SR355)


# In[118]:


m1 = np.ma.masked_where(Pointing.values==1,LNG_Total_Attenuated_Backscatter.values)
print(valid_Time.shape, m1.shape)


# In[16]:


fig, ax = plt.subplots(figsize=(8,4))
pcm = ax.pcolormesh(valid_Time.values, valid_Height.values.T, m3.T,
                   cmap='turbo', vmin=0, vmax=10)
plt.colorbar(pcm, ax=ax)
# pcm2 = ax.pcolormesh(valid_Time.values, valid_Height.values.T, Pointing.values.T, )
# LNG_Total_Attenuated_Backscatter.plot(x='time', y='height', norm=LogNorm(vmin=1e-8, vmax=1e-3))
ax.set_ylim(-1,18)


# In[71]:


valid_rate = (data['Validity_rate'] == 1)
angles = np.array(data['LNG_UpDown'].isel(height=10,time=valid_rate).values)
print(angles.shape)
pointings = {1.0:'nadir',2.0:'zenith', 3.0:'ADM 37'}
# print([pointings[ids] for ids in angles])
df_pointing = pd.DataFrame(dict(#time=data['Time'].values[~np.isnan(angles)], alt=[18]*angles[~np.isnan(angles)].shape[0],
                                ids=angles[~np.isnan(angles)], pointing=[pointings[ids] for ids in angles[~np.isnan(angles)]]))
df_pointing, np.array(df_pointing.loc[df_pointing['pointing']=='nadir'].index)
# print(df_pointing)


# In[ ]:


fig, ax = plt.subplots()
ax.plot(valid_time, data['Aircraft_Altitude'].isel(time = valid_rate).values, 'k-', label='Aircraft_Altitude')
ax.plot(valid_time, data['HSR_Ground_Echo'].isel(time = valid_rate).values, 'r-', label='Ground Echo')
ax.legend()
ax.set(ylabel='Alt, km', xlabel='Time')


# In[10]:


fig, ax = plt.subplots()
data['LNG_Total_Attenuated_Backscatter_532'].where((data['Mask_532']==1)|(data['Mask_532']==2)&(data['LNG_UpDown']==1)).plot(x='time', y='height', norm=LogNorm(vmin=1e-8, vmax=1e-3))


# In[19]:


# filtrage 
# 1. validated profile

valid_rate = (data['Validity_rate'] == 1)


mask1 = np.isin(data['Mask_532'].values, [1,2,3])
print(mask1.shape, data['Mask_532'].values.shape)


# In[ ]:


data['LNG_Total_Attenuated_Backscatter_532'].where((data['Mask_532']==1)&(data['LNG_UpDown']==1), drop=False)

